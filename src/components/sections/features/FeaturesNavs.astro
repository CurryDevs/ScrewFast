---
// Import the necessary dependencies
import TabNav from "@components/ui/blocks/TabNav.astro";
import TabContent from "@components/ui/blocks/TabContent.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define props from Astro
const { title, tabs } = Astro.props;

// Define TypeScript interface for tab object
interface Tab {
  heading: string;
  content: string;
  svg: string;
  src: any;
  alt: string;
  first?: boolean;
  second?: boolean;
}

// Define TypeScript interface for props
interface Props {
  title?: string;
  tabs: Tab[];
}
---

<section
  class="relative mx-auto max-w-[85rem] overflow-hidden px-4 py-16 sm:px-6 lg:px-8 lg:py-20 2xl:max-w-full"
>
  <!-- Background Elements -->
  <div class="absolute inset-0 -z-20">
    <!-- Animated gradient background -->
    <div
      class="absolute inset-0 bg-gradient-to-br from-red-50/30 via-purple-50/20 to-blue-50/30 dark:from-red-950/20 dark:via-purple-950/15 dark:to-blue-950/20"
    >
    </div>

    <!-- Floating orbs -->
    <div
      class="animate-float absolute top-1/4 left-10 h-32 w-32 rounded-full bg-gradient-to-br from-red-300/20 to-purple-300/20 blur-2xl dark:from-red-700/30 dark:to-purple-700/30"
    >
    </div>
    <div
      class="animate-float-delayed absolute right-10 bottom-1/4 h-40 w-40 rounded-full bg-gradient-to-br from-purple-300/20 to-blue-300/20 blur-2xl dark:from-purple-700/30 dark:to-blue-700/30"
    >
    </div>

    <!-- Animated lines -->
    <div
      class="absolute top-0 left-1/3 h-full w-px animate-pulse bg-gradient-to-b from-transparent via-red-200/40 to-transparent dark:via-red-800/40"
    >
    </div>
    <div
      class="absolute top-0 right-1/3 h-full w-px animate-pulse bg-gradient-to-b from-transparent via-purple-200/40 to-transparent delay-1000 dark:via-purple-800/40"
    >
    </div>
  </div>

  <div class="relative p-6 md:p-16">
    <div
      class="relative z-10 lg:grid lg:grid-cols-12 lg:items-center lg:gap-16"
    >
      <!-- Section's heading and tab navigation -->
      <div
        class="animate-fade-in-up mb-10 lg:order-2 lg:col-span-6 lg:col-start-8 lg:mb-0"
        style="animation-delay: 0.1s"
      >
        <!-- Section badge -->
        <div
          class="mb-6 inline-flex items-center gap-2 rounded-full bg-gradient-to-r from-red-100 to-purple-100 px-4 py-2 text-sm font-semibold text-red-800 dark:from-red-900/30 dark:to-purple-900/30 dark:text-red-300"
        >
          <svg
            class="animate-spin-slow h-4 w-4"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
              clip-rule="evenodd"></path>
          </svg>
          Customizable Solutions
        </div>

        <h2
          class="text-3xl font-bold text-neutral-800 sm:text-4xl lg:text-5xl dark:text-neutral-200"
        >
          <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
          <Fragment set:html={title} />
        </h2>

        <!-- Enhanced description -->
        <p class="mt-4 text-lg text-neutral-600 dark:text-neutral-400">
          Discover our comprehensive suite of tools and services designed to
          transform your workflow and accelerate your success.
        </p>

        <!-- Tab navigation - use the attribute 'first' in the first TabNav for the component to work -->
        <nav class="mt-8 grid gap-4 md:mt-12" aria-label="Tabs" role="tablist">
          {
            tabs.map((tab, index) => (
              <div
                class="animate-fade-in-up"
                style={`animation-delay: ${0.2 + index * 0.1}s`}
              >
                <TabNav
                  id={`tabs-with-card-item-${index + 1}`}
                  dataTab={`#tabs-with-card-${index + 1}`}
                  aria={`tabs-with-card-${index + 1}`}
                  heading={tab.heading}
                  content={tab.content}
                  first={tab.first}
                >
                  <Icon name={tab.svg} />
                </TabNav>
              </div>
            ))
          }
        </nav>

        <!-- Progress indicator -->
        <div
          class="animate-fade-in-up mt-8 flex items-center gap-2"
          style="animation-delay: 0.6s"
        >
          <div class="flex gap-1">
            <div
              class="h-2 w-8 rounded-full bg-gradient-to-r from-red-500 to-purple-600"
            >
            </div>
            <div
              class="h-2 w-4 rounded-full bg-neutral-300 dark:bg-neutral-600"
            >
            </div>
            <div
              class="h-2 w-4 rounded-full bg-neutral-300 dark:bg-neutral-600"
            >
            </div>
          </div>
          <span class="text-sm text-neutral-500 dark:text-neutral-400"
            >1 of 3 solutions</span
          >
        </div>
      </div>

      <!-- Contents for each tab - the 'first' attribute should be used in the first tab for that tab to be initially visible, 'second' changes the styles -->
      <div
        class="animate-fade-in-up lg:col-span-6"
        style="animation-delay: 0.3s"
      >
        <div class="relative">
          <!-- Floating elements around the image -->
          <div
            class="absolute -top-4 -left-4 h-8 w-8 animate-bounce rounded-full bg-gradient-to-br from-red-400 to-purple-500 opacity-60 delay-0"
          >
          </div>
          <div
            class="absolute -top-2 -right-6 h-6 w-6 animate-bounce rounded-full bg-gradient-to-br from-purple-400 to-blue-500 opacity-60 delay-300"
          >
          </div>
          <div
            class="absolute -right-4 -bottom-4 h-10 w-10 animate-bounce rounded-full bg-gradient-to-br from-blue-400 to-red-500 opacity-60 delay-700"
          >
          </div>

          <div class="relative">
            {
              tabs.map((tab, index) => (
                <TabContent
                  id={`tabs-with-card-${index + 1}`}
                  aria={`tabs-with-card-item-${index + 1}`}
                  src={tab.src}
                  alt={tab.alt}
                  first={tab.first}
                  second={tab.second}
                />
              ))
            }
          </div>

          <!-- Overlay stats -->
          <div
            class="absolute right-4 bottom-4 left-4 rounded-xl bg-white/90 p-4 shadow-lg backdrop-blur-sm dark:bg-neutral-800/90"
          >
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div
                  class="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-r from-red-500 to-purple-600"
                >
                  <svg
                    class="h-5 w-5 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
                <div>
                  <div
                    class="text-sm font-semibold text-neutral-800 dark:text-neutral-200"
                  >
                    Performance Boost
                  </div>
                  <div class="text-xs text-neutral-600 dark:text-neutral-400">
                    +150% efficiency
                  </div>
                </div>
              </div>
              <div class="text-right">
                <div class="text-lg font-bold text-green-600">98%</div>
                <div class="text-xs text-neutral-600 dark:text-neutral-400">
                  Success Rate
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced decorative background -->
    <div class="absolute inset-0 -z-10 grid h-full w-full grid-cols-12">
      <div
        class="col-span-full h-5/6 w-full rounded-2xl bg-gradient-to-br from-white/60 via-neutral-50/80 to-white/60 shadow-2xl backdrop-blur-sm sm:h-3/4 lg:col-span-7 lg:col-start-6 lg:h-full dark:from-white/[.08] dark:via-white/[.05] dark:to-white/[.08]"
      >
        <!-- Inner glow effect -->
        <div
          class="absolute inset-0 rounded-2xl bg-gradient-to-br from-red-500/5 via-transparent to-purple-500/5"
        >
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0px) rotate(0deg);
    }
    50% {
      transform: translateY(-20px) rotate(180deg);
    }
  }

  @keyframes float-delayed {
    0%,
    100% {
      transform: translateY(0px) rotate(0deg);
    }
    50% {
      transform: translateY(-15px) rotate(-180deg);
    }
  }

  @keyframes spin-slow {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.8s ease-out forwards;
    opacity: 0;
  }

  .animate-float {
    animation: float 8s ease-in-out infinite;
  }

  .animate-float-delayed {
    animation: float-delayed 10s ease-in-out infinite;
  }

  .animate-spin-slow {
    animation: spin-slow 8s linear infinite;
  }

  /* Ensure smooth animations */
  @media (prefers-reduced-motion: reduce) {
    .animate-fade-in-up,
    .animate-float,
    .animate-float-delayed,
    .animate-spin-slow,
    .animate-bounce {
      animation: none;
    }

    * {
      transition-duration: 0.01ms !important;
    }
  }
</style>
