---
import AvatarTestimonialSection from "../../ui/avatars/AvatarTestimonialSection.astro";

const { title, testimonials } = Astro.props;

interface Testimonial {
  content: string;
  author: string;
  role: string;
  avatarSrc: string;
  avatarAlt: string;
}

interface Props {
  title: string;
  testimonials: Testimonial[];
}
---
<section
  class="relative mx-auto max-w-screen-xl px-4 py-20 sm:px-6 lg:px-8"
  id="testimonials"
>
  <!-- Decorative Background Glow -->
  <div class="pointer-events-none absolute inset-0 -z-10">
    <div class="absolute left-[10%] top-[40%] h-60 w-60 animate-pulse-slow rounded-full bg-purple-400/10 blur-[100px] dark:bg-pink-400/10"></div>
    <div class="absolute right-[5%] top-[10%] h-80 w-80 animate-float rounded-full bg-blue-300/10 blur-[120px] dark:bg-blue-600/10"></div>
  </div>

  <!-- Section Title -->
  <div class="mb-14 w-full text-center">
    <h2 class="text-4xl font-extrabold leading-tight text-neutral-800 dark:text-white sm:text-5xl">
      {title}
    </h2>
    <p class="mt-2 text-lg text-neutral-500 dark:text-neutral-400">What people are saying</p>
  </div>

  <!-- Testimonials Grid -->
  <div class="grid gap-10 sm:grid-cols-2 lg:grid-cols-3">
    {
      testimonials.map((testimonial, idx) => (
        <div
          class="testimonial-card opacity-0 transform translate-y-10 transition-all duration-700 ease-out"
          style={`animation-delay: ${idx * 150}ms`}
        >
          <div
            class="group flex h-full flex-col justify-between rounded-3xl border border-white/20 bg-white/30 p-6 shadow-xl backdrop-blur-md transition-transform duration-300 hover:-translate-y-1 hover:shadow-2xl dark:border-neutral-700/40 dark:bg-neutral-800/40"
          >
            <p class="text-lg italic text-neutral-700 dark:text-neutral-300">
              “{testimonial.content}”
            </p>
            <div class="mt-6 flex items-center gap-4 border-t border-neutral-200 pt-4 dark:border-neutral-700">
              <AvatarTestimonialSection
                src={testimonial.avatarSrc}
                alt={testimonial.avatarAlt}
              />
              <div>
                <p class="font-semibold text-neutral-900 dark:text-neutral-100">
                  {testimonial.author}
                </p>
                <p class="text-sm text-neutral-600 dark:text-neutral-400">
                  {testimonial.role}
                </p>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<style>
  /* Framer Motion-like fade-in-up animation */
  @keyframes fade-in-up {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .testimonial-card.reveal {
    opacity: 1 !important;
    transform: translateY(0) !important;
    animation: fade-in-up 0.6s ease-out both;
  }

  /* Floating glow animation */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  .animate-float {
    animation: float 8s ease-in-out infinite;
  }

  .animate-pulse-slow {
    animation: pulse 10s infinite ease-in-out;
  }
</style>

<script>
  // Reveal elements on scroll (Framer style)
  if (typeof window !== "undefined") {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("reveal");
          }
        });
      },
      {
        threshold: 0.1,
      }
    );

    document.querySelectorAll(".testimonial-card").forEach((card) => {
      observer.observe(card);
    });
  }
</script>
